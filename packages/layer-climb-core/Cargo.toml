[package]
name = "layer-climb-core"
description = "Core sub-crate for Climb"
version.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true

[lib]
crate-type = ["lib"]

[dependencies]
######## Local dependencies ########
layer-climb-proto = { workspace = true } 
layer-climb-address = { workspace = true } 
layer-climb-config = { workspace = true } 
layer-climb-signer = { workspace = true } 

######## Workspace dependencies ########
# General
cfg-if = {workspace = true} 
async-trait = {workspace = true} 

# Error handling
thiserror = {workspace = true}
anyhow = {workspace = true} 

# Binary encoding
const-hex = {workspace = true} 
base64 = {workspace = true} 

# Logging
tracing = {workspace = true} 
log = {workspace = true}

# Serdeish
toml = {workspace = true} 
serde = {workspace = true} 
serde_json = {workspace = true} 

# Crypto
bip39 = {workspace = true} 

# Networking
reqwest = {workspace = true} 

# Async
futures = {workspace = true} 

# Randomness
rand = {workspace = true} 

# Cosmos
cosmwasm-std = {workspace = true} 
tendermint = {workspace = true} 
tendermint-rpc = {workspace = true} 

# Pool
deadpool = {workspace = true, optional = true}

######## Target-specific dependencies ########

# Native (non-wasm32)
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
getrandom      = "0.3"
futures-timer  = { version = "3.0.3", default-features = false }
tonic          = { version = "0.13", default-features = false, features = ["transport", "tls-native-roots", "tls-webpki-roots"] }
deadpool       = { workspace = true }
tokio          = { version = "1", features = ["sync"] }  # do not use from workspace which pulls in "full"

# Browser-based wasm32 (e.g. wasm32-unknown-unknown)
[target.'cfg(all(target_arch = "wasm32", target_os = "unknown"))'.dependencies]
tonic-web-wasm-client = { workspace = true }
getrandom             = { version = "0.3", features = ["wasm_js"] }
futures-timer         = { version = "3.0.3", default-features = false, features = ["wasm-bindgen"] }
tonic                 = { version = "0.13", default-features = false }

# Other wasm32 (e.g. WASI)
[target.'cfg(all(target_arch = "wasm32", not(target_os = "unknown")))'.dependencies]
wstd = { workspace = true }
getrandom      = "0.3"
futures-timer  = { version = "3.0.3", default-features = false }
tonic          = { version = "0.13", default-features = false }
deadpool       = { workspace = true }
http = "1"
http-body = "1"
http-body-util = "0.1"
httparse = "1"
tower-service = "0.3"
